use libc::c_int;
use libc::c_ulong;
use libc::c_void;
pub unsafe extern "C" fn add_huff_table(
    mut cinfo: j_common_ptr,
    mut htblptr: *mut *mut JHUFF_TBL,
    mut bits: *const UINT8,
    mut val: *const UINT8,
) {
    let mut nsymbols: c_int = 0;
    let mut len: c_int = 0;
    if (*htblptr).is_null() {
        *htblptr = jpeg_alloc_huff_table(cinfo)
    } else {
        return;
    }
    memcpy(
        (**htblptr).bits.as_mut_ptr() as *mut c_void,
        bits as *const c_void,
        ::std::mem::size_of::<[UINT8; 17]>() as c_ulong,
    );
    nsymbols = 0i32;
    len = 1i32;
    while len <= 16i32 {
        nsymbols += *bits.offset(len as isize) as c_int;
        len += 1
    }
    if nsymbols < 1i32 || nsymbols > 256i32 {
        (*(*cinfo).err).msg_code = JERR_BAD_HUFF_TABLE as c_int;
        (*(*cinfo).err)
            .error_exit
            .expect("non-null function pointer")(cinfo);
    }
    memcpy(
        (**htblptr).huffval.as_mut_ptr() as *mut c_void,
        val as *const c_void,
        (nsymbols as c_ulong).wrapping_mul(::std::mem::size_of::<UINT8>() as c_ulong),
    );
    memset(
        &mut *(**htblptr).huffval.as_mut_ptr().offset(nsymbols as isize) as *mut UINT8
            as *mut c_void,
        0i32,
        ((256i32 - nsymbols) as c_ulong).wrapping_mul(::std::mem::size_of::<UINT8>() as c_ulong),
    );
    (**htblptr).sent_table = FALSE;
}
pub unsafe extern "C" fn std_huff_tables(mut cinfo: j_common_ptr) {
    let mut dc_huff_tbl_ptrs: *mut *mut JHUFF_TBL = 0 as *mut *mut JHUFF_TBL;
    let mut ac_huff_tbl_ptrs: *mut *mut JHUFF_TBL = 0 as *mut *mut JHUFF_TBL;
    pub static mut bits_dc_luminance: [UINT8; 17] = [
        0i32 as UINT8,
        0i32 as UINT8,
        1i32 as UINT8,
        5i32 as UINT8,
        1i32 as UINT8,
        1i32 as UINT8,
        1i32 as UINT8,
        1i32 as UINT8,
        1i32 as UINT8,
        1i32 as UINT8,
        0i32 as UINT8,
        0i32 as UINT8,
        0i32 as UINT8,
        0i32 as UINT8,
        0i32 as UINT8,
        0i32 as UINT8,
        0i32 as UINT8,
    ];
    /* 0-base */
    pub static mut val_dc_luminance: [UINT8; 12] = [
        0i32 as UINT8,
        1i32 as UINT8,
        2i32 as UINT8,
        3i32 as UINT8,
        4i32 as UINT8,
        5i32 as UINT8,
        6i32 as UINT8,
        7i32 as UINT8,
        8i32 as UINT8,
        9i32 as UINT8,
        10i32 as UINT8,
        11i32 as UINT8,
    ];
    pub static mut bits_dc_chrominance: [UINT8; 17] = [
        0i32 as UINT8,
        0i32 as UINT8,
        3i32 as UINT8,
        1i32 as UINT8,
        1i32 as UINT8,
        1i32 as UINT8,
        1i32 as UINT8,
        1i32 as UINT8,
        1i32 as UINT8,
        1i32 as UINT8,
        1i32 as UINT8,
        1i32 as UINT8,
        0i32 as UINT8,
        0i32 as UINT8,
        0i32 as UINT8,
        0i32 as UINT8,
        0i32 as UINT8,
    ];
    /* 0-base */
    pub static mut val_dc_chrominance: [UINT8; 12] = [
        0i32 as UINT8,
        1i32 as UINT8,
        2i32 as UINT8,
        3i32 as UINT8,
        4i32 as UINT8,
        5i32 as UINT8,
        6i32 as UINT8,
        7i32 as UINT8,
        8i32 as UINT8,
        9i32 as UINT8,
        10i32 as UINT8,
        11i32 as UINT8,
    ];
    pub static mut bits_ac_luminance: [UINT8; 17] = [
        0i32 as UINT8,
        0i32 as UINT8,
        2i32 as UINT8,
        1i32 as UINT8,
        3i32 as UINT8,
        3i32 as UINT8,
        2i32 as UINT8,
        4i32 as UINT8,
        3i32 as UINT8,
        5i32 as UINT8,
        5i32 as UINT8,
        4i32 as UINT8,
        4i32 as UINT8,
        0i32 as UINT8,
        0i32 as UINT8,
        1i32 as UINT8,
        0x7di32 as UINT8,
    ];
    /* 0-base */
    pub static mut val_ac_luminance: [UINT8; 162] = [
        0x1i32 as UINT8,
        0x2i32 as UINT8,
        0x3i32 as UINT8,
        0i32 as UINT8,
        0x4i32 as UINT8,
        0x11i32 as UINT8,
        0x5i32 as UINT8,
        0x12i32 as UINT8,
        0x21i32 as UINT8,
        0x31i32 as UINT8,
        0x41i32 as UINT8,
        0x6i32 as UINT8,
        0x13i32 as UINT8,
        0x51i32 as UINT8,
        0x61i32 as UINT8,
        0x7i32 as UINT8,
        0x22i32 as UINT8,
        0x71i32 as UINT8,
        0x14i32 as UINT8,
        0x32i32 as UINT8,
        0x81i32 as UINT8,
        0x91i32 as UINT8,
        0xa1i32 as UINT8,
        0x8i32 as UINT8,
        0x23i32 as UINT8,
        0x42i32 as UINT8,
        0xb1i32 as UINT8,
        0xc1i32 as UINT8,
        0x15i32 as UINT8,
        0x52i32 as UINT8,
        0xd1i32 as UINT8,
        0xf0i32 as UINT8,
        0x24i32 as UINT8,
        0x33i32 as UINT8,
        0x62i32 as UINT8,
        0x72i32 as UINT8,
        0x82i32 as UINT8,
        0x9i32 as UINT8,
        0xai32 as UINT8,
        0x16i32 as UINT8,
        0x17i32 as UINT8,
        0x18i32 as UINT8,
        0x19i32 as UINT8,
        0x1ai32 as UINT8,
        0x25i32 as UINT8,
        0x26i32 as UINT8,
        0x27i32 as UINT8,
        0x28i32 as UINT8,
        0x29i32 as UINT8,
        0x2ai32 as UINT8,
        0x34i32 as UINT8,
        0x35i32 as UINT8,
        0x36i32 as UINT8,
        0x37i32 as UINT8,
        0x38i32 as UINT8,
        0x39i32 as UINT8,
        0x3ai32 as UINT8,
        0x43i32 as UINT8,
        0x44i32 as UINT8,
        0x45i32 as UINT8,
        0x46i32 as UINT8,
        0x47i32 as UINT8,
        0x48i32 as UINT8,
        0x49i32 as UINT8,
        0x4ai32 as UINT8,
        0x53i32 as UINT8,
        0x54i32 as UINT8,
        0x55i32 as UINT8,
        0x56i32 as UINT8,
        0x57i32 as UINT8,
        0x58i32 as UINT8,
        0x59i32 as UINT8,
        0x5ai32 as UINT8,
        0x63i32 as UINT8,
        0x64i32 as UINT8,
        0x65i32 as UINT8,
        0x66i32 as UINT8,
        0x67i32 as UINT8,
        0x68i32 as UINT8,
        0x69i32 as UINT8,
        0x6ai32 as UINT8,
        0x73i32 as UINT8,
        0x74i32 as UINT8,
        0x75i32 as UINT8,
        0x76i32 as UINT8,
        0x77i32 as UINT8,
        0x78i32 as UINT8,
        0x79i32 as UINT8,
        0x7ai32 as UINT8,
        0x83i32 as UINT8,
        0x84i32 as UINT8,
        0x85i32 as UINT8,
        0x86i32 as UINT8,
        0x87i32 as UINT8,
        0x88i32 as UINT8,
        0x89i32 as UINT8,
        0x8ai32 as UINT8,
        0x92i32 as UINT8,
        0x93i32 as UINT8,
        0x94i32 as UINT8,
        0x95i32 as UINT8,
        0x96i32 as UINT8,
        0x97i32 as UINT8,
        0x98i32 as UINT8,
        0x99i32 as UINT8,
        0x9ai32 as UINT8,
        0xa2i32 as UINT8,
        0xa3i32 as UINT8,
        0xa4i32 as UINT8,
        0xa5i32 as UINT8,
        0xa6i32 as UINT8,
        0xa7i32 as UINT8,
        0xa8i32 as UINT8,
        0xa9i32 as UINT8,
        0xaai32 as UINT8,
        0xb2i32 as UINT8,
        0xb3i32 as UINT8,
        0xb4i32 as UINT8,
        0xb5i32 as UINT8,
        0xb6i32 as UINT8,
        0xb7i32 as UINT8,
        0xb8i32 as UINT8,
        0xb9i32 as UINT8,
        0xbai32 as UINT8,
        0xc2i32 as UINT8,
        0xc3i32 as UINT8,
        0xc4i32 as UINT8,
        0xc5i32 as UINT8,
        0xc6i32 as UINT8,
        0xc7i32 as UINT8,
        0xc8i32 as UINT8,
        0xc9i32 as UINT8,
        0xcai32 as UINT8,
        0xd2i32 as UINT8,
        0xd3i32 as UINT8,
        0xd4i32 as UINT8,
        0xd5i32 as UINT8,
        0xd6i32 as UINT8,
        0xd7i32 as UINT8,
        0xd8i32 as UINT8,
        0xd9i32 as UINT8,
        0xdai32 as UINT8,
        0xe1i32 as UINT8,
        0xe2i32 as UINT8,
        0xe3i32 as UINT8,
        0xe4i32 as UINT8,
        0xe5i32 as UINT8,
        0xe6i32 as UINT8,
        0xe7i32 as UINT8,
        0xe8i32 as UINT8,
        0xe9i32 as UINT8,
        0xeai32 as UINT8,
        0xf1i32 as UINT8,
        0xf2i32 as UINT8,
        0xf3i32 as UINT8,
        0xf4i32 as UINT8,
        0xf5i32 as UINT8,
        0xf6i32 as UINT8,
        0xf7i32 as UINT8,
        0xf8i32 as UINT8,
        0xf9i32 as UINT8,
        0xfai32 as UINT8,
    ];
    pub static mut bits_ac_chrominance: [UINT8; 17] = [
        0i32 as UINT8,
        0i32 as UINT8,
        2i32 as UINT8,
        1i32 as UINT8,
        2i32 as UINT8,
        4i32 as UINT8,
        4i32 as UINT8,
        3i32 as UINT8,
        4i32 as UINT8,
        7i32 as UINT8,
        5i32 as UINT8,
        4i32 as UINT8,
        4i32 as UINT8,
        0i32 as UINT8,
        1i32 as UINT8,
        2i32 as UINT8,
        0x77i32 as UINT8,
    ];
    /* 0-base */
    pub static mut val_ac_chrominance: [UINT8; 162] = [
        0i32 as UINT8,
        0x1i32 as UINT8,
        0x2i32 as UINT8,
        0x3i32 as UINT8,
        0x11i32 as UINT8,
        0x4i32 as UINT8,
        0x5i32 as UINT8,
        0x21i32 as UINT8,
        0x31i32 as UINT8,
        0x6i32 as UINT8,
        0x12i32 as UINT8,
        0x41i32 as UINT8,
        0x51i32 as UINT8,
        0x7i32 as UINT8,
        0x61i32 as UINT8,
        0x71i32 as UINT8,
        0x13i32 as UINT8,
        0x22i32 as UINT8,
        0x32i32 as UINT8,
        0x81i32 as UINT8,
        0x8i32 as UINT8,
        0x14i32 as UINT8,
        0x42i32 as UINT8,
        0x91i32 as UINT8,
        0xa1i32 as UINT8,
        0xb1i32 as UINT8,
        0xc1i32 as UINT8,
        0x9i32 as UINT8,
        0x23i32 as UINT8,
        0x33i32 as UINT8,
        0x52i32 as UINT8,
        0xf0i32 as UINT8,
        0x15i32 as UINT8,
        0x62i32 as UINT8,
        0x72i32 as UINT8,
        0xd1i32 as UINT8,
        0xai32 as UINT8,
        0x16i32 as UINT8,
        0x24i32 as UINT8,
        0x34i32 as UINT8,
        0xe1i32 as UINT8,
        0x25i32 as UINT8,
        0xf1i32 as UINT8,
        0x17i32 as UINT8,
        0x18i32 as UINT8,
        0x19i32 as UINT8,
        0x1ai32 as UINT8,
        0x26i32 as UINT8,
        0x27i32 as UINT8,
        0x28i32 as UINT8,
        0x29i32 as UINT8,
        0x2ai32 as UINT8,
        0x35i32 as UINT8,
        0x36i32 as UINT8,
        0x37i32 as UINT8,
        0x38i32 as UINT8,
        0x39i32 as UINT8,
        0x3ai32 as UINT8,
        0x43i32 as UINT8,
        0x44i32 as UINT8,
        0x45i32 as UINT8,
        0x46i32 as UINT8,
        0x47i32 as UINT8,
        0x48i32 as UINT8,
        0x49i32 as UINT8,
        0x4ai32 as UINT8,
        0x53i32 as UINT8,
        0x54i32 as UINT8,
        0x55i32 as UINT8,
        0x56i32 as UINT8,
        0x57i32 as UINT8,
        0x58i32 as UINT8,
        0x59i32 as UINT8,
        0x5ai32 as UINT8,
        0x63i32 as UINT8,
        0x64i32 as UINT8,
        0x65i32 as UINT8,
        0x66i32 as UINT8,
        0x67i32 as UINT8,
        0x68i32 as UINT8,
        0x69i32 as UINT8,
        0x6ai32 as UINT8,
        0x73i32 as UINT8,
        0x74i32 as UINT8,
        0x75i32 as UINT8,
        0x76i32 as UINT8,
        0x77i32 as UINT8,
        0x78i32 as UINT8,
        0x79i32 as UINT8,
        0x7ai32 as UINT8,
        0x82i32 as UINT8,
        0x83i32 as UINT8,
        0x84i32 as UINT8,
        0x85i32 as UINT8,
        0x86i32 as UINT8,
        0x87i32 as UINT8,
        0x88i32 as UINT8,
        0x89i32 as UINT8,
        0x8ai32 as UINT8,
        0x92i32 as UINT8,
        0x93i32 as UINT8,
        0x94i32 as UINT8,
        0x95i32 as UINT8,
        0x96i32 as UINT8,
        0x97i32 as UINT8,
        0x98i32 as UINT8,
        0x99i32 as UINT8,
        0x9ai32 as UINT8,
        0xa2i32 as UINT8,
        0xa3i32 as UINT8,
        0xa4i32 as UINT8,
        0xa5i32 as UINT8,
        0xa6i32 as UINT8,
        0xa7i32 as UINT8,
        0xa8i32 as UINT8,
        0xa9i32 as UINT8,
        0xaai32 as UINT8,
        0xb2i32 as UINT8,
        0xb3i32 as UINT8,
        0xb4i32 as UINT8,
        0xb5i32 as UINT8,
        0xb6i32 as UINT8,
        0xb7i32 as UINT8,
        0xb8i32 as UINT8,
        0xb9i32 as UINT8,
        0xbai32 as UINT8,
        0xc2i32 as UINT8,
        0xc3i32 as UINT8,
        0xc4i32 as UINT8,
        0xc5i32 as UINT8,
        0xc6i32 as UINT8,
        0xc7i32 as UINT8,
        0xc8i32 as UINT8,
        0xc9i32 as UINT8,
        0xcai32 as UINT8,
        0xd2i32 as UINT8,
        0xd3i32 as UINT8,
        0xd4i32 as UINT8,
        0xd5i32 as UINT8,
        0xd6i32 as UINT8,
        0xd7i32 as UINT8,
        0xd8i32 as UINT8,
        0xd9i32 as UINT8,
        0xdai32 as UINT8,
        0xe2i32 as UINT8,
        0xe3i32 as UINT8,
        0xe4i32 as UINT8,
        0xe5i32 as UINT8,
        0xe6i32 as UINT8,
        0xe7i32 as UINT8,
        0xe8i32 as UINT8,
        0xe9i32 as UINT8,
        0xeai32 as UINT8,
        0xf2i32 as UINT8,
        0xf3i32 as UINT8,
        0xf4i32 as UINT8,
        0xf5i32 as UINT8,
        0xf6i32 as UINT8,
        0xf7i32 as UINT8,
        0xf8i32 as UINT8,
        0xf9i32 as UINT8,
        0xfai32 as UINT8,
    ];
    if 0 != (*cinfo).is_decompressor {
        dc_huff_tbl_ptrs = (*(cinfo as j_decompress_ptr)).dc_huff_tbl_ptrs.as_mut_ptr();
        ac_huff_tbl_ptrs = (*(cinfo as j_decompress_ptr)).ac_huff_tbl_ptrs.as_mut_ptr()
    } else {
        dc_huff_tbl_ptrs = (*(cinfo as j_compress_ptr)).dc_huff_tbl_ptrs.as_mut_ptr();
        ac_huff_tbl_ptrs = (*(cinfo as j_compress_ptr)).ac_huff_tbl_ptrs.as_mut_ptr()
    }
    add_huff_table(
        cinfo,
        &mut *dc_huff_tbl_ptrs.offset(0isize),
        bits_dc_luminance.as_ptr(),
        val_dc_luminance.as_ptr(),
    );
    add_huff_table(
        cinfo,
        &mut *ac_huff_tbl_ptrs.offset(0isize),
        bits_ac_luminance.as_ptr(),
        val_ac_luminance.as_ptr(),
    );
    add_huff_table(
        cinfo,
        &mut *dc_huff_tbl_ptrs.offset(1isize),
        bits_dc_chrominance.as_ptr(),
        val_dc_chrominance.as_ptr(),
    );
    add_huff_table(
        cinfo,
        &mut *ac_huff_tbl_ptrs.offset(1isize),
        bits_ac_chrominance.as_ptr(),
        val_ac_chrominance.as_ptr(),
    );
}
use crate::jerror::JERR_BAD_HUFF_TABLE;
use crate::jmorecfg_h::boolean;
use crate::jmorecfg_h::FALSE;
use crate::jmorecfg_h::UINT8;
use crate::jpeglib_h::j_common_ptr;
use crate::jpeglib_h::j_compress_ptr;
use crate::jpeglib_h::j_decompress_ptr;
use crate::jpeglib_h::jpeg_alloc_huff_table;
use crate::jpeglib_h::jpeg_common_struct;
use crate::jpeglib_h::JHUFF_TBL;
use crate::stdlib::memcpy;
use crate::stdlib::memset;
use ::libc;
